import React, { createContext, useContext, useState } from 'react';
import { snaggingAPI } from '@/services/api';

interface Flat {
  id: string;
  applicationNo: string;
  applicantName: string;
  flatNo: string;
  tower: string;
  area: string;
  bhk: string;
  floor: number;
  possession_date: string;
  project: string;
  mobileNumber: string;
  status: 'pending' | 'in_progress' | 'completed' | 'on_hold';
  applicantImage?: string;
}

interface SnaggingNote {
  id: string;
  category: string;
  note: string;
  timestamp: string;
}

interface UploadedFile {
  uri: string;
  name: string;
  type: string;
}

interface Translation {
  [key: string]: string;
}

interface AppContextType {
  currentFlat: Flat | null;
  setCurrentFlat: (flat: Flat | null) => void;
  snaggingNotes: SnaggingNote[];
  addSnaggingNote: (note: SnaggingNote) => void;
  editSnaggingNote: (id: string, updatedNote: Partial<SnaggingNote>) => void;
  deleteSnaggingNote: (id: string) => void;
  clearSnaggingNotes: () => void;
  signedSnaggingReport: UploadedFile | null;
  signedInventoryReport: UploadedFile | null;
  setSignedSnaggingReport: (file: UploadedFile | null) => void;
  setSignedInventoryReport: (file: UploadedFile | null) => void;
  searchFlat: (searchValue: string, searchType: 'application' | 'mobile') => Promise<Flat | null>;
  submitReport: (report: any, signedSnaggingReport: UploadedFile | null, signedInventoryReport: UploadedFile | null) => Promise<boolean>;
  completeHandover: () => void;
  language: 'en' | 'mr';
  setLanguage: (lang: 'en' | 'mr') => void;
  t: (key: string) => string;
}

const translations: { en: Translation; mr: Translation } = {
  en: {
    // Common
    search: 'Search',
    cancel: 'Cancel',
    ok: 'OK',
    yes: 'Yes',
    no: 'No',
    submit: 'Submit',
    clear: 'Clear',
    proceed: 'Proceed',
    back: 'Back',
    next: 'Next',
    complete: 'Complete',
    pending: 'Pending',
    completed: 'Completed',
    in_progress: 'In Progress',
    on_hold: 'On Hold',
    edit: 'Edit',
    delete: 'Delete',
    select_category: 'Select Category',
    upload_snagging_report: 'Upload Signed Snagging Report',
    upload_inventory_report: 'Upload Signed Inventory Report',
    file_uploaded: 'File uploaded: {name}',
    upload_required: 'Please upload both signed snagging and inventory reports before submitting.',

    // Dashboard
    welcome_back: 'Welcome back,',
    pending_handovers: 'Pending Handovers',
    completed_today: 'Completed Today',
    current_assignment: 'Current Assignment',
    no_active_assignment: 'No Active Assignment',
    search_applications: 'Search Applications',
    quick_actions: 'Quick Actions',
    search_flat: 'Search Flat',
    view_history: 'View History',
    proceed_to_handover: 'Proceed to Snagging',

    // Search
    search_application: 'Search Application',
    search_subtitle: 'Find flat details by application number or mobile number',
    application_no: 'Application No.',
    mobile_no: 'Mobile No.',
    enter_application_number: 'Enter Application Number',
    enter_mobile_number: 'Enter Mobile Number',
    flat_details: 'Flat Details',
    ready_for_handover: 'Ready for Handover',
    configuration: 'Configuration:',
    location: 'Location:',
    possession_date: 'Possession Date:',
    search_options: 'Search Options',
    search_help_text: 'You can search for flats using either the application number or the registered mobile number.',
    example_formats: 'Example formats:',
    no_flat_found_app: 'No flat found with this application number',
    no_flat_found_mobile: 'No flat found with this mobile number',
    please_enter_application: 'Please enter an application number',
    please_enter_mobile: 'Please enter a mobile number',

    // Snagging Report
    snagging_report: 'Snagging Report',
    snagging_summary: 'Snagging Summary',
    instructions: 'Instructions',
    instructions_text: 'Document any issues found during the inspection by adding notes under the relevant categories. You can proceed to submit the report once all issues are documented.',
    electrical: 'Electrical',
    plumbing: 'Plumbing',
    doors_windows: 'Doors & Windows',
    walls_flooring: 'Walls & Flooring',
    kitchen_bathroom: 'Kitchen & Bathroom',
    submit_report: 'Submit Report',
    add_note: 'Add Note',
    add_note_placeholder: 'Enter details of the issue...',
    total_notes: 'Total Notes: {count}',
    snagging_instructions_text: 'Document all snagging issues found during inspection. Add detailed notes under each category and submit the report when complete.',

    // Signature
    digital_signature: 'Digital Signature',
    signature_required: 'Signature Required',
    signature_description: 'Please ask the applicant to sign below to confirm receipt of the flat keys and completion of the snagging report.',
    applicant_signature: 'Applicant Signature',
    sign_here: 'Sign here',
    clear_signature: 'Clear Signature',
    agreement: 'Agreement',
    agreement_text: 'By signing above, I acknowledge that I have reviewed the snagging report and received the flat keys. I confirm that all noted issues will be addressed as per the report.',
    proceed_to_verification: 'Proceed to Verification',
    signature_required_message: 'Please provide a signature before proceeding.',

    // OTP
    otp_verification: 'OTP Verification',
    secure_verification: 'Secure Verification',
    otp_description: 'An OTP has been sent to the applicant\'s registered mobile number for final verification.',
    enter_otp: 'Enter 6-digit OTP',
    time_remaining: 'Time remaining: {time}',
    resend_otp: 'Resend OTP',
    complete_handover: 'Complete Handover',
    verifying: 'Verifying...',
    demo_otp: 'Demo OTP',
    use_demo_otp: 'Use this OTP for testing',
    invalid_otp: 'Invalid OTP',
    invalid_otp_message: 'The OTP you entered is incorrect. Please try again.',
    enter_complete_otp: 'Please enter the complete 6-digit OTP.',
    otp_sent: 'OTP Sent',
    new_otp_sent: 'A new OTP has been sent to the registered mobile number.',
    handover_complete: 'Handover Complete!',
    handover_complete_message: 'The flat handover has been successfully completed and recorded.',
    security_note: 'üîí This verification ensures secure handover completion and creates an audit trail for the transaction.',

    // History
    handover_history: 'Handover History',
    history_subtitle: 'View all your completed and pending handovers',
    recent_activity: 'Recent Activity',
    this_month_summary: 'This Month Summary',
    total_handovers: 'Total Handovers:',
    success_rate: 'Success Rate:',
    average_time: 'Average Time:',

    // Profile
    field_agent: 'Field Agent',
    contact_information: 'Contact Information',
    performance_stats: 'Performance Stats',
    total_handovers_stat: 'Total Handovers',
    success_rate_stat: 'Success Rate',
    this_month_stat: 'This Month',
    recent_achievements: 'Recent Achievements',
    top_performer: 'Top Performer',
    top_performer_desc: 'Completed 25 handovers this month',
    quality_champion: 'Quality Champion',
    quality_champion_desc: 'Maintained 96% success rate',
    account: 'Account',
    account_settings: 'Account Settings',
    help_support: 'Help & Support',
    logout: 'Logout',
    logout_confirm: 'Are you sure you want to logout?',
    app_info: 'Flat Handover App v1.0.0',
    copyright: '¬© 2024 Property Management',

    // Login
    flat_handover: 'Flat Handover',
    agent_portal: 'Agent Portal',
    email_address: 'Email Address',
    password: 'Password',
    sign_in: 'Sign In',
    demo_credentials: 'Demo Credentials:',
    invalid_credentials: 'Invalid email or password',
    enter_credentials: 'Please enter both email and password',
  },
  mr: {
    // Common
    search: '‡§∂‡•ã‡§ß‡§æ',
    cancel: '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡§æ',
    ok: '‡§†‡•Ä‡§ï ‡§Ü‡§π‡•á',
    yes: '‡§π‡•ã‡§Ø',
    no: '‡§®‡§æ‡§π‡•Ä',
    submit: '‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡§æ',
    clear: '‡§∏‡§æ‡§´ ‡§ï‡§∞‡§æ',
    proceed: '‡§™‡•Å‡§¢‡•á ‡§ú‡§æ',
    back: '‡§Æ‡§æ‡§ó‡•á',
    next: '‡§™‡•Å‡§¢‡•á',
    complete: '‡§™‡•Ç‡§∞‡•ç‡§£',
    pending: '‡§™‡•ç‡§∞‡§≤‡§Ç‡§¨‡§ø‡§§',
    completed: '‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ù‡§æ‡§≤‡•á',
    in_progress: '‡§™‡•ç‡§∞‡§ó‡§§‡•Ä‡§§',
    on_hold: '‡§•‡§æ‡§Ç‡§¨‡§µ‡§≤‡•á',
    edit: '‡§∏‡§Ç‡§™‡§æ‡§¶‡§® ‡§ï‡§∞‡§æ',
    delete: '‡§π‡§ü‡§µ‡§æ',
    select_category: '‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§®‡§ø‡§µ‡§°‡§æ',
    upload_snagging_report: '‡§∏‡§π‡•Ä ‡§ï‡•á‡§≤‡•á‡§≤‡§æ ‡§∏‡•ç‡§®‡•Ö‡§ó‡§ø‡§Ç‡§ó ‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ',
    upload_inventory_report: '‡§∏‡§π‡•Ä ‡§ï‡•á‡§≤‡•á‡§≤‡§æ ‡§á‡§®‡•ç‡§µ‡•ç‡§π‡•á‡§Ç‡§ü‡§∞‡•Ä ‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ',
    file_uploaded: '‡§´‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ù‡§æ‡§≤‡•Ä: {name}',
    upload_required: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä ‡§ï‡•á‡§≤‡•á‡§≤‡•á ‡§∏‡•ç‡§®‡•Ö‡§ó‡§ø‡§Ç‡§ó ‡§Ü‡§£‡§ø ‡§á‡§®‡•ç‡§µ‡•ç‡§π‡•á‡§Ç‡§ü‡§∞‡•Ä ‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡•Ä ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ.',

    // Dashboard
    welcome_back: '‡§™‡§∞‡§§ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§,',
    pending_handovers: '‡§™‡•ç‡§∞‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§π‡§∏‡•ç‡§§‡§æ‡§Ç‡§§‡§∞‡§£',
    completed_today: '‡§Ü‡§ú ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ù‡§æ‡§≤‡•á',
    current_assignment: '‡§∏‡§ß‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§®‡§ø‡§Ø‡•Å‡§ï‡•ç‡§§‡•Ä',
    no_active_assignment: '‡§ï‡•ã‡§£‡§§‡•Ä‡§π‡•Ä ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§®‡§ø‡§Ø‡•Å‡§ï‡•ç‡§§‡•Ä ‡§®‡§æ‡§π‡•Ä',
    search_applications: '‡§Ö‡§∞‡•ç‡§ú ‡§∂‡•ã‡§ß‡§æ',
    quick_actions: '‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ',
    search_flat: '‡§´‡•ç‡§≤‡•Ö‡§ü ‡§∂‡•ã‡§ß‡§æ',
    view_history: '‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§™‡§π‡§æ',
    proceed_to_handover: '‡§π‡§∏‡•ç‡§§‡§æ‡§Ç‡§§‡§∞‡§£‡§æ‡§∏‡§æ‡§†‡•Ä ‡§™‡•Å‡§¢‡•á ‡§ú‡§æ',

    // Search
    search_application: '‡§Ö‡§∞‡•ç‡§ú ‡§∂‡•ã‡§ß‡§æ',
    search_subtitle: '‡§Ö‡§∞‡•ç‡§ú ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞‡§¶‡•ç‡§µ‡§æ‡§∞‡•á ‡§´‡•ç‡§≤‡•Ö‡§ü‡§ö‡•á ‡§§‡§™‡§∂‡•Ä‡§≤ ‡§∂‡•ã‡§ß‡§æ',
    application_no: '‡§Ö‡§∞‡•ç‡§ú ‡§ï‡•ç‡§∞.',
    mobile_no: '‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§ï‡•ç‡§∞.',
    enter_application_number: '‡§Ö‡§∞‡•ç‡§ú ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ',
    enter_mobile_number: '‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ',
    flat_details: '‡§´‡•ç‡§≤‡•Ö‡§ü‡§ö‡•á ‡§§‡§™‡§∂‡•Ä‡§≤',
    ready_for_handover: '‡§π‡§∏‡•ç‡§§‡§æ‡§Ç‡§§‡§∞‡§£‡§æ‡§∏‡§æ‡§†‡•Ä ‡§§‡§Ø‡§æ‡§∞',
    configuration: '‡§ï‡•â‡§®‡•ç‡§´‡§ø‡§ó‡§∞‡•á‡§∂‡§®:',
    location: '‡§∏‡•ç‡§•‡§æ‡§®:',
    possession_date: '‡§§‡§æ‡§¨‡•ç‡§Ø‡§æ‡§§ ‡§ò‡•á‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ:',
    search_options: '‡§∂‡•ã‡§ß ‡§™‡§∞‡•ç‡§Ø‡§æ‡§Ø',
    search_help_text: '‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§Ö‡§∞‡•ç‡§ú ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§®‡•ã‡§Ç‡§¶‡§£‡•Ä‡§ï‡•É‡§§ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® ‡§´‡•ç‡§≤‡•Ö‡§ü ‡§∂‡•ã‡§ß‡•Ç ‡§∂‡§ï‡§§‡§æ.',
    example_formats: '‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§∏‡•ç‡§µ‡§∞‡•Ç‡§™:',
    no_flat_found_app: '‡§Ø‡§æ ‡§Ö‡§∞‡•ç‡§ú ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï‡§æ‡§∏‡§π ‡§ï‡•ã‡§£‡§§‡§æ‡§π‡•Ä ‡§´‡•ç‡§≤‡•Ö‡§ü ‡§∏‡§æ‡§™‡§°‡§≤‡§æ ‡§®‡§æ‡§π‡•Ä',
    no_flat_found_mobile: '‡§Ø‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞‡§∏‡§π ‡§ï‡•ã‡§£‡§§‡§æ‡§π‡•Ä ‡§´‡•ç‡§≤‡•Ö‡§ü ‡§∏‡§æ‡§™‡§°‡§≤‡§æ ‡§®‡§æ‡§π‡•Ä',
    please_enter_application: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§∞‡•ç‡§ú ‡§ï‡•ç‡§∞‡§Æ‡§æ‡§Ç‡§ï ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ',
    please_enter_mobile: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ',

    // Snagging Report
    snagging_report: '‡§∏‡•ç‡§®‡•Ö‡§ó‡§ø‡§Ç‡§ó ‡§Ö‡§π‡§µ‡§æ‡§≤',
    snagging_summary: '‡§∏‡•ç‡§®‡•Ö‡§ó‡§ø‡§Ç‡§ó ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂',
    instructions: '‡§∏‡•Ç‡§ö‡§®‡§æ',
    instructions_text: '‡§§‡§™‡§æ‡§∏‡§£‡•Ä ‡§¶‡§∞‡§Æ‡•ç‡§Ø‡§æ‡§® ‡§Ü‡§¢‡§≥‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§ï‡•ã‡§£‡§§‡•ç‡§Ø‡§æ‡§π‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§Ç‡§ö‡•á ‡§¶‡§∏‡•ç‡§§‡§ê‡§µ‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä‡§Ç‡§ñ‡§æ‡§≤‡•Ä ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§ú‡•ã‡§°‡•Ç‡§® ‡§ï‡§∞‡§æ. ‡§∏‡§∞‡•ç‡§µ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§Ç‡§ö‡•á ‡§¶‡§∏‡•ç‡§§‡§ê‡§µ‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ù‡§æ‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡§æ.',
    electrical: '‡§µ‡§ø‡§¶‡•ç‡§Ø‡•Å‡§§',
    plumbing: '‡§™‡•ç‡§≤‡§Ç‡§¨‡§ø‡§Ç‡§ó',
    doors_windows: '‡§¶‡§∞‡§µ‡§æ‡§ú‡•á ‡§Ü‡§£‡§ø ‡§ñ‡§ø‡§°‡§ï‡•ç‡§Ø‡§æ',
    walls_flooring: '‡§≠‡§ø‡§Ç‡§§‡•Ä ‡§Ü‡§£‡§ø ‡§´‡•ç‡§≤‡•ã‡§Ö‡§∞‡§ø‡§Ç‡§ó',
    kitchen_bathroom: '‡§∏‡•ç‡§µ‡§Ø‡§Ç‡§™‡§æ‡§ï‡§ò‡§∞ ‡§Ü‡§£‡§ø ‡§∏‡•ç‡§®‡§æ‡§®‡§ó‡•É‡§π',
    submit_report: '‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡§æ',
    add_note: '‡§®‡•ã‡§ü ‡§ú‡•ã‡§°‡§æ',
    add_note_placeholder: '‡§∏‡§Æ‡§∏‡•ç‡§Ø‡•á‡§ö‡•á ‡§§‡§™‡§∂‡•Ä‡§≤ ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ...',
    total_notes: '‡§è‡§ï‡•Ç‡§£ ‡§®‡•ã‡§ü‡•ç‡§∏: {count}',
    snagging_instructions_text: '‡§§‡§™‡§æ‡§∏‡§£‡•Ä ‡§¶‡§∞‡§Æ‡•ç‡§Ø‡§æ‡§® ‡§Ü‡§¢‡§≥‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§∏‡§∞‡•ç‡§µ ‡§∏‡•ç‡§®‡•Ö‡§ó‡§ø‡§Ç‡§ó ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§Ç‡§ö‡•á ‡§¶‡§∏‡•ç‡§§‡§ê‡§µ‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§ï‡§∞‡§æ. ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§ó‡§§ ‡§§‡§™‡§∂‡•Ä‡§≤‡§µ‡§æ‡§∞ ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§ú‡•ã‡§°‡§æ ‡§Ü‡§£‡§ø ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ù‡§æ‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ ‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡§æ.',

    // Signature
    digital_signature: '‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∏‡•ç‡§µ‡§æ‡§ï‡•ç‡§∑‡§∞‡•Ä',
    signature_required: '‡§∏‡•ç‡§µ‡§æ‡§ï‡•ç‡§∑‡§∞‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï',
    signature_description: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞‡§æ‡§≤‡§æ ‡§∏‡•ç‡§®‡•Ö‡§ó‡§ø‡§Ç‡§ó ‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§™‡•Å‡§®‡§∞‡§æ‡§µ‡§≤‡•ã‡§ï‡§® ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§Ü‡§£‡§ø ‡§´‡•ç‡§≤‡•Ö‡§ü‡§ö‡•ç‡§Ø‡§æ ‡§ö‡§æ‡§µ‡•ç‡§Ø‡§æ ‡§Æ‡§ø‡§≥‡§æ‡§≤‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡•Ä ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§ñ‡§æ‡§≤‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§ï‡•ç‡§∑‡§∞‡•Ä ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏ ‡§∏‡§æ‡§Ç‡§ó‡§æ.',
    applicant_signature: '‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞‡§æ‡§ö‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§ï‡•ç‡§∑‡§∞‡•Ä',
    sign_here: '‡§Ø‡•á‡§•‡•á ‡§∏‡•ç‡§µ‡§æ‡§ï‡•ç‡§∑‡§∞‡•Ä ‡§ï‡§∞‡§æ',
    clear_signature: '‡§∏‡•ç‡§µ‡§æ‡§ï‡•ç‡§∑‡§∞‡•Ä ‡§∏‡§æ‡§´ ‡§ï‡§∞‡§æ',
    agreement: '‡§ï‡§∞‡§æ‡§∞',
    agreement_text: '‡§µ‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§ï‡•ç‡§∑‡§∞‡•Ä ‡§ï‡§∞‡•Ç‡§®, ‡§Æ‡•Ä ‡§ï‡§¨‡•Ç‡§≤ ‡§ï‡§∞‡§§‡•ã ‡§ï‡•Ä ‡§Æ‡•Ä ‡§∏‡•ç‡§®‡•Ö‡§ó‡§ø‡§Ç‡§ó ‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§™‡•Å‡§®‡§∞‡§æ‡§µ‡§≤‡•ã‡§ï‡§® ‡§ï‡•á‡§≤‡§æ ‡§Ü‡§π‡•á ‡§Ü‡§£‡§ø ‡§´‡•ç‡§≤‡•Ö‡§ü‡§ö‡•ç‡§Ø‡§æ ‡§ö‡§æ‡§µ‡•ç‡§Ø‡§æ ‡§Æ‡§ø‡§≥‡§æ‡§≤‡•ç‡§Ø‡§æ ‡§Ü‡§π‡•á‡§§. ‡§Æ‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡•Ä ‡§ï‡§∞‡§§‡•ã ‡§ï‡•Ä ‡§®‡•ã‡§Ç‡§¶‡§µ‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§Ç‡§ö‡•á ‡§Ö‡§π‡§µ‡§æ‡§≤‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§®‡§ø‡§∞‡§æ‡§ï‡§∞‡§£ ‡§ï‡•á‡§≤‡•á ‡§ú‡§æ‡§à‡§≤.',
    proceed_to_verification: '‡§™‡§°‡§§‡§æ‡§≥‡§£‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§™‡•Å‡§¢‡•á ‡§ú‡§æ',
    signature_required_message: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§¢‡•á ‡§ú‡§æ‡§£‡•ç‡§Ø‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§ï‡•ç‡§∑‡§∞‡•Ä ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§æ.',

    // OTP
    otp_verification: 'OTP ‡§™‡§°‡§§‡§æ‡§≥‡§£‡•Ä',
    secure_verification: '‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§™‡§°‡§§‡§æ‡§≥‡§£‡•Ä',
    otp_description: '‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§™‡§°‡§§‡§æ‡§≥‡§£‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§Ö‡§∞‡•ç‡§ú‡§¶‡§æ‡§∞‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§®‡•ã‡§Ç‡§¶‡§£‡•Ä‡§ï‡•É‡§§ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞‡§µ‡§∞ OTP ‡§™‡§æ‡§†‡§µ‡§≤‡§æ ‡§ó‡•á‡§≤‡§æ ‡§Ü‡§π‡•á.',
    enter_otp: '6-‡§Ö‡§Ç‡§ï‡•Ä OTP ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ',
    time_remaining: '‡§â‡§∞‡•ç‡§µ‡§∞‡§ø‡§§ ‡§µ‡•á‡§≥: {time}',
    resend_otp: 'OTP ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡§æ‡§†‡§µ‡§æ',
    complete_handover: '‡§π‡§∏‡•ç‡§§‡§æ‡§Ç‡§§‡§∞‡§£ ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡§∞‡§æ',
    demo_otp: '‡§°‡•á‡§Æ‡•ã OTP',
    use_demo_otp: '‡§ö‡§æ‡§ö‡§£‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§π‡§æ OTP ‡§µ‡§æ‡§™‡§∞‡§æ',
    invalid_otp: '‡§Ö‡§µ‡•à‡§ß OTP',
    invalid_otp_message: '‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡•á‡§≤‡•á‡§≤‡§æ OTP ‡§ö‡•Å‡§ï‡•Ä‡§ö‡§æ ‡§Ü‡§π‡•á. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ.',
    enter_complete_otp: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§Ç‡§™‡•Ç‡§∞‡•ç‡§£ 6-‡§Ö‡§Ç‡§ï‡•Ä OTP ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ.',
    otp_sent: 'OTP ‡§™‡§æ‡§†‡§µ‡§≤‡§æ',
    new_otp_sent: '‡§®‡•ã‡§Ç‡§¶‡§£‡•Ä‡§ï‡•É‡§§ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞‡§µ‡§∞ ‡§®‡§µ‡•Ä‡§® OTP ‡§™‡§æ‡§†‡§µ‡§≤‡§æ ‡§ó‡•á‡§≤‡§æ ‡§Ü‡§π‡•á.',
    handover_complete: '‡§π‡§∏‡•ç‡§§‡§æ‡§Ç‡§§‡§∞‡§£ ‡§™‡•Ç‡§∞‡•ç‡§£!',
    handover_complete_message: '‡§´‡•ç‡§≤‡•Ö‡§ü ‡§π‡§∏‡•ç‡§§‡§æ‡§Ç‡§§‡§∞‡§£ ‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä‡§∞‡§ø‡§§‡•ç‡§Ø‡§æ ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ù‡§æ‡§≤‡•á ‡§Ü‡§£‡§ø ‡§®‡•ã‡§Ç‡§¶‡§µ‡§≤‡•á ‡§ó‡•á‡§≤‡•á.',
    security_note: 'üîí ‡§π‡•Ä ‡§™‡§°‡§§‡§æ‡§≥‡§£‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§π‡§∏‡•ç‡§§‡§æ‡§Ç‡§§‡§∞‡§£ ‡§™‡•Ç‡§∞‡•ç‡§£‡§§‡§æ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡•á ‡§Ü‡§£‡§ø ‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞‡§æ‡§∏‡§æ‡§†‡•Ä ‡§ë‡§°‡§ø‡§ü ‡§ü‡•ç‡§∞‡•á‡§≤ ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§§‡•á.',

    // History
    handover_history: '‡§π‡§∏‡•ç‡§§‡§æ‡§Ç‡§§‡§∞‡§£ ‡§á‡§§‡§ø‡§π‡§æ‡§∏',
    history_subtitle: '‡§§‡•Å‡§Æ‡§ö‡•á ‡§∏‡§∞‡•ç‡§µ ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Ü‡§£‡§ø ‡§™‡•ç‡§∞‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§π‡§∏‡•ç‡§§‡§æ‡§Ç‡§§‡§∞‡§£ ‡§™‡§π‡§æ',
    recent_activity: '‡§Ö‡§≤‡•Ä‡§ï‡§°‡•Ä‡§≤ ‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§ï‡§≤‡§æ‡§™',
    this_month_summary: '‡§Ø‡§æ ‡§Æ‡§π‡§ø‡§®‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂',
    total_handovers: '‡§è‡§ï‡•Ç‡§£ ‡§π‡§∏‡•ç‡§§‡§æ‡§Ç‡§§‡§∞‡§£:',
    success_rate: '‡§Ø‡§∂ ‡§¶‡§∞:',
    average_time: '‡§∏‡§∞‡§æ‡§∏‡§∞‡•Ä ‡§µ‡•á‡§≥:',

    // Profile
    field_agent: '‡§´‡•Ä‡§≤‡•ç‡§° ‡§è‡§ú‡§Ç‡§ü',
    contact_information: '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä',
    performance_stats: '‡§ï‡§æ‡§Æ‡§ó‡§ø‡§∞‡•Ä ‡§Ü‡§ï‡§°‡•á‡§µ‡§æ‡§∞‡•Ä',
    total_handovers_stat: '‡§è‡§ï‡•Ç‡§£ ‡§π‡§∏‡•ç‡§§‡§æ‡§Ç‡§§‡§∞‡§£',
    success_rate_stat: '‡§Ø‡§∂ ‡§¶‡§∞',
    this_month_stat: '‡§Ø‡§æ ‡§Æ‡§π‡§ø‡§®‡•ç‡§Ø‡§æ‡§§',
    recent_achievements: '‡§Ö‡§≤‡•Ä‡§ï‡§°‡•Ä‡§≤ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡•Ä',
    top_performer: '‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§ï‡§æ‡§Æ‡§ó‡§ø‡§∞‡•Ä',
    top_performer_desc: '‡§Ø‡§æ ‡§Æ‡§π‡§ø‡§®‡•ç‡§Ø‡§æ‡§§ 25 ‡§π‡§∏‡•ç‡§§‡§æ‡§Ç‡§§‡§∞‡§£ ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡•á‡§≤‡•á',
    quality_champion: '‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§ö‡•Ö‡§Æ‡•ç‡§™‡§ø‡§Ø‡§®',
    quality_champion_desc: '96% ‡§Ø‡§∂ ‡§¶‡§∞ ‡§∞‡§æ‡§ñ‡§≤‡§æ',
    account: '‡§ñ‡§æ‡§§‡•á',
    account_settings: '‡§ñ‡§æ‡§§‡•á ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§ú',
    help_support: '‡§Æ‡§¶‡§§ ‡§Ü‡§£‡§ø ‡§∏‡§Æ‡§∞‡•ç‡§•‡§®',
    logout: '‡§≤‡•â‡§ó‡§Ü‡§â‡§ü',
    logout_confirm: '‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§ñ‡§æ‡§§‡•ç‡§∞‡•Ä ‡§Ü‡§π‡•á ‡§ï‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§≤‡•â‡§ó‡§Ü‡§â‡§ü ‡§ï‡§∞‡•Ç ‡§á‡§ö‡•ç‡§õ‡§ø‡§§‡§æ?',
    app_info: '‡§´‡•ç‡§≤‡•Ö‡§ü ‡§π‡§∏‡•ç‡§§‡§æ‡§Ç‡§§‡§∞‡§£ ‡§Ö‡•Ö‡§™ v1.0.0',
    copyright: '¬© 2024 ‡§™‡•ç‡§∞‡•â‡§™‡§∞‡•ç‡§ü‡•Ä ‡§Æ‡•Ö‡§®‡•á‡§ú‡§Æ‡•á‡§Ç‡§ü',

    // Login
    flat_handover: '‡§´‡•ç‡§≤‡•Ö‡§ü ‡§π‡§∏‡•ç‡§§‡§æ‡§Ç‡§§‡§∞‡§£',
    agent_portal: '‡§è‡§ú‡§Ç‡§ü ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤',
    email_address: '‡§à‡§Æ‡•á‡§≤ ‡§™‡§§‡•ç‡§§‡§æ',
    password: '‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°',
    sign_in: '‡§∏‡§æ‡§á‡§® ‡§á‡§®',
    demo_credentials: '‡§°‡•á‡§Æ‡•ã ‡§ï‡•ç‡§∞‡•á‡§°‡•á‡§®‡•ç‡§∂‡§ø‡§Ø‡§≤‡•ç‡§∏:',
    invalid_credentials: '‡§Ö‡§µ‡•à‡§ß ‡§à‡§Æ‡•á‡§≤ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°',
    enter_credentials: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§à‡§Æ‡•á‡§≤ ‡§Ü‡§£‡§ø ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§¶‡•ã‡§®‡•ç‡§π‡•Ä ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü ‡§ï‡§∞‡§æ',
  },
};

const defaultSnaggingNotes: SnaggingNote[] = [
  {
    id: '1',
    category: 'Electrical',
    note: 'Faulty main switchboard detected',
    timestamp: '2024-02-15T10:00:00Z',
  },
  {
    id: '2',
    category: 'Plumbing',
    note: 'Minor leak in kitchen tap',
    timestamp: '2024-02-15T10:05:00Z',
  },
];

const mockFlats: Flat[] = [
  {
    id: '1',
    applicationNo: '250201000010',
    applicantName: 'Rajesh Kumar',
    flatNo: 'A-101',
    tower: 'Tower A',
    area: '1200 sq ft',
    bhk: '2BHK',
    floor: 1,
    possession_date: '2024-02-15',
    project: 'Green Valley Residency',
    mobileNumber: '+91 98765 43210',
    status: 'pending',
    applicantImage: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&q=80',
  },
  {
    id: '2',
    applicationNo: '240100145809',
    applicantName: 'Priya Sharma',
    flatNo: 'B-205',
    tower: 'Tower B',
    area: '1450 sq ft',
    bhk: '3BHK',
    floor: 2,
    possession_date: '2024-02-20',
    project: 'Green Valley Residency',
    mobileNumber: '+91 87654 32109',
    status: 'pending',
    applicantImage: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&q=80',
  },
  {
    id: '3',
    applicationNo: '240100145810',
    applicantName: 'Mohammad Ali',
    flatNo: 'C-305',
    tower: 'Tower C',
    area: '1600 sq ft',
    bhk: '3BHK',
    floor: 3,
    possession_date: '2024-02-25',
    project: 'Green Valley Residency',
    mobileNumber: '+91 76543 21098',
    status: 'pending',
    applicantImage: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&q=80',
  },
];

const AppContext = createContext<AppContextType | undefined>(undefined);

export function AppProvider({ children }: { children: React.ReactNode }) {
  const [currentFlat, setCurrentFlat] = useState<Flat | null>(null);
  const [snaggingNotes, setSnaggingNotes] = useState<SnaggingNote[]>(defaultSnaggingNotes);
  const [signedSnaggingReport, setSignedSnaggingReport] = useState<UploadedFile | null>(null);
  const [signedInventoryReport, setSignedInventoryReport] = useState<UploadedFile | null>(null);
  const [language, setLanguage] = useState<'en' | 'mr'>('en');

  const t = (key: string): string => {
    return translations[language][key] || key;
  };

  const addSnaggingNote = (note: SnaggingNote) => {
    setSnaggingNotes(prev => [...prev, note]);
  };

  const editSnaggingNote = (id: string, updatedNote: Partial<SnaggingNote>) => {
    setSnaggingNotes(prev =>
      prev.map(note =>
        note.id === id ? { ...note, ...updatedNote, timestamp: new Date().toISOString() } : note
      )
    );
  };

  const deleteSnaggingNote = (id: string) => {
    setSnaggingNotes(prev => prev.filter(note => note.id !== id));
  };

  const clearSnaggingNotes = () => {
    setSnaggingNotes([]);
  };

  const searchFlat = async (searchValue: string, searchType: 'application' | 'mobile'): Promise<Flat | null> => {
    try {
      // Try to use the API first
      // For mobile search, remove +91 prefix before sending to API
      let apiSearchValue = searchValue;
      if (searchType === 'mobile') {
        apiSearchValue = searchValue.replace(/^\+91\s*/, '').replace(/\s/g, '');
      }
      
      const response = await snaggingAPI.searchFlat(apiSearchValue, searchType);
      
      if (response.data.success && response.data.data) {
        // Map API response to Flat interface
        const apiFlat = response.data.data;
        return {
          id: Date.now().toString(),
          applicationNo: apiFlat.applicationNo || searchValue,
          applicantName: apiFlat.FirstName || 'Unknown',
          flatNo: apiFlat.FlatNo || 'N/A',
          tower: apiFlat.Wing || 'N/A',
          area: 'N/A', // Not provided in API response
          bhk: apiFlat.AptType || 'N/A',
          floor: parseInt(apiFlat.FloorNo) || 1,
          possession_date: apiFlat.possession_date || new Date().toISOString().split('T')[0],
          project: apiFlat.ProjectName || 'N/A',
          mobileNumber: apiFlat.MobileNo || 'N/A',
          status: apiFlat.status || 'pending',
          applicantImage: apiFlat.ImagePath,
        };
      }
    } catch (error) {
      console.error('API search failed, falling back to mock data:', error);
    }

    // Fallback to mock data if API fails
    await new Promise(resolve => setTimeout(resolve, 1000));
    let flat: Flat | undefined;

    if (searchType === 'application') {
      flat = mockFlats.find(f => f.applicationNo.toLowerCase() === searchValue.toLowerCase());
    } else {
      const cleanSearchValue = searchValue.replace(/[\s\-\(\)]/g, '');
      flat = mockFlats.find(f => {
        const cleanMobileNumber = f.mobileNumber.replace(/[\s\-\(\)]/g, '');
        return cleanMobileNumber.includes(cleanSearchValue) || cleanSearchValue.includes(cleanMobileNumber.slice(-10));
      });
    }
    return flat || null;
  };

  const submitReport = async (report: any, signedSnaggingReport: UploadedFile | null, signedInventoryReport: UploadedFile | null): Promise<boolean> => {
    try {
      // Try to use the API first
      const response = await snaggingAPI.submitReport({
        report,
        signedSnaggingReport,
        signedInventoryReport
      });
      
      return response.data.success || false;
    } catch (error) {
      console.error('API submit failed, using fallback:', error);
      // Fallback simulation
      await new Promise(resolve => setTimeout(resolve, 1500));
      console.log('Submitting report with files:', { report, signedSnaggingReport, signedInventoryReport });
      return true;
    }
  };

  const completeHandover = () => {
    if (currentFlat) {
      setCurrentFlat({ ...currentFlat, status: 'completed' });
    }
  };

  return (
    <AppContext.Provider
      value={{
        currentFlat,
        setCurrentFlat,
        snaggingNotes,
        addSnaggingNote,
        editSnaggingNote,
        deleteSnaggingNote,
        clearSnaggingNotes,
        signedSnaggingReport,
        signedInventoryReport,
        setSignedSnaggingReport,
        setSignedInventoryReport,
        searchFlat,
        submitReport,
        completeHandover,
        language,
        setLanguage,
        t,
      }}
    >
      {children}
    </AppContext.Provider>
  );
}

export function useApp() {
  const context = useContext(AppContext);
  if (context === undefined) {
    throw new Error('useApp must be used within an AppProvider');
  }
  return context;
}